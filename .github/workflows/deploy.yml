name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  SUPABASE_VERSION: '1.0.0'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      timeout-minutes: 5
    
    - name: Run Frontend Lint
      working-directory: ./frontend
      run: npm run lint
      timeout-minutes: 3
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      timeout-minutes: 10
    
    - name: Verify build artifacts
      working-directory: ./frontend
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed: .next directory not found"
          exit 1
        fi
        echo "‚úÖ Build artifacts verified"
        ls -la .next/ | head -10

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Supabase CLI
      run: npm install supabase --save-dev
      timeout-minutes: 5
    
    - name: Deploy to Supabase
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: |
        echo "üöÄ Starting Supabase deployment..."
        cd supabase
        echo "üì° Linking to Supabase project..."
        npx supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        echo "üóÑÔ∏è Pushing database schema..."
        npx supabase db push
        echo "‚ö° Deploying Laravel API function..."
        npx supabase functions deploy laravel-api
        echo "‚úÖ Supabase deployment completed"
      timeout-minutes: 20
    
    - name: Setup Environment Variables
      run: |
        cd supabase
        npx supabase secrets set SUPABASE_URL=${{ secrets.SUPABASE_URL }}
        npx supabase secrets set SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        npx supabase secrets set SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        npx supabase secrets set JWT_SECRET=${{ secrets.JWT_SECRET }}
        npx supabase secrets set ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      timeout-minutes: 5
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        NEXT_PUBLIC_FRONTEND_URL: ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}
      timeout-minutes: 10
    
    - name: Verify build before deploy
      working-directory: ./frontend
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed: .next directory not found"
          exit 1
        fi
        echo "‚úÖ Build verified, proceeding to deploy"
    
    - name: Check Vercel environment
      run: |
        echo "üîç Checking Vercel environment variables..."
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "‚ùå VERCEL_TOKEN is not set"
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "‚ùå VERCEL_ORG_ID is not set"
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "‚ùå VERCEL_PROJECT_ID is not set"
          exit 1
        fi
        echo "‚úÖ All Vercel secrets are configured"
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v26
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod --debug'
      timeout-minutes: 15

  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Health Check
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
        echo "üîç Checking API health..."
        for i in {1..10}; do
          if curl -f -s --max-time 30 ${{ secrets.SUPABASE_URL }}/functions/v1/laravel-api/api/health; then
            echo "‚úÖ API healthy!"
            break
          fi
          echo "‚è≥ API not ready, retrying in 15s... (attempt $i/10)"
          sleep 15
          if [ $i -eq 10 ]; then
            echo "‚ùå API health check failed after 10 attempts."
            exit 1
          fi
        done
        
        echo "üîç Checking frontend..."
        for i in {1..10}; do
          if curl -f -s --max-time 30 ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}; then
            echo "‚úÖ Frontend healthy!"
            break
          fi
          echo "‚è≥ Frontend not ready, retrying in 15s... (attempt $i/10)"
          sleep 15
          if [ $i -eq 10 ]; then
            echo "‚ùå Frontend health check failed after 10 attempts."
            exit 1
          fi
        done
        
        echo "üéâ All health checks passed!"
      timeout-minutes: 10 