name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '20.x'
  SUPABASE_VERSION: '1.0.0'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      timeout-minutes: 5
    
    - name: Run Frontend Lint
      working-directory: ./frontend
      run: npm run lint
      timeout-minutes: 3
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      timeout-minutes: 10
    
    - name: Verify build artifacts
      working-directory: ./frontend
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed: .next directory not found"
          exit 1
        fi
        echo "‚úÖ Build artifacts verified"
        ls -la .next/ | head -10

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Supabase CLI
      run: npm install supabase --save-dev
      timeout-minutes: 5
    
    - name: Deploy to Supabase
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      run: |
        echo "üöÄ Starting Supabase deployment..."
        cd supabase
        echo "üì° Linking to Supabase project..."
        npx supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        echo "üóÑÔ∏è Pushing database schema..."
        echo "Y" | npx supabase db push
        echo "‚ö° Deploying API function..."
        npx supabase functions deploy api
        echo "‚ö° Deploying scheduled publisher function..."
        npx supabase functions deploy scheduled-publisher
        echo "‚úÖ Supabase deployment completed"
      timeout-minutes: 20
    
    - name: Setup Environment Variables
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      run: |
        cd supabase
        # SUPABASE_„ÅßÂßã„Åæ„ÇãÁí∞Â¢ÉÂ§âÊï∞„ÅØË®≠ÂÆö„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„Çπ„Ç≠„ÉÉ„Éó
        # npx supabase secrets set SUPABASE_URL=${{ secrets.SUPABASE_URL }}
        # npx supabase secrets set SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        # npx supabase secrets set SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        
        # „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âõ∫Êúâ„ÅÆ„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅÆ„ÅøË®≠ÂÆö
        if [ -n "${{ secrets.JWT_SECRET }}" ]; then
          npx supabase secrets set JWT_SECRET="${{ secrets.JWT_SECRET }}"
        else
          echo "Warning: JWT_SECRET is empty"
        fi
        
        if [ -n "${{ secrets.ALLOWED_ORIGINS }}" ]; then
          npx supabase secrets set ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS }}"
        else
          echo "Warning: ALLOWED_ORIGINS is empty"
        fi

    - name: Verify Supabase Functions Deployment
      run: |
        echo "‚úÖ Supabase Functions deployment verification completed"
        echo "‚ÑπÔ∏è Database operations are handled by Supabase Functions directly"

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      timeout-minutes: 5
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        NEXT_PUBLIC_FRONTEND_URL: ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}
      timeout-minutes: 10
    
    - name: Verify build before deploy
      working-directory: ./frontend
      run: |
        if [ ! -d ".next" ]; then
          echo "‚ùå Build failed: .next directory not found"
          exit 1
        fi
        echo "‚úÖ Build verified, proceeding to deploy"
    
    - name: Check Vercel environment
      run: |
        echo "üîç Checking Vercel environment variables..."
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "‚ùå VERCEL_TOKEN is not set"
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "‚ùå VERCEL_ORG_ID is not set"
          exit 1
        fi
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "‚ùå VERCEL_PROJECT_ID is not set"
          exit 1
        fi
        echo "‚úÖ All Vercel secrets are configured"
    
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      timeout-minutes: 5
    
    - name: Deploy to Vercel (Root Directory Fix)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        echo "üöÄ Starting Vercel deployment from root directory..."
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´ÁßªÂãï
        cd frontend
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆö„ÇíÁ¢∫Ë™ç
        if [ -f "vercel.json" ]; then
          echo "‚úÖ vercel.json found"
          cat vercel.json
        else
          echo "‚ö†Ô∏è vercel.json not found, using default settings"
        fi
        
        # ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÁ¢∫Ë™ç
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Directory contents:"
        ls -la
        
        # VercelË®≠ÂÆö„ÇíÂÆåÂÖ®„Å´„É™„Çª„ÉÉ„Éà
        echo "üîÑ Resetting Vercel configuration..."
        rm -rf .vercel
        mkdir -p .vercel
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆö„ÇíÊòéÁ§∫ÁöÑ„Å´‰∏äÊõ∏„Åç
        cat > .vercel/project.json << 'EOF'
        {
          "projectId": "${{ secrets.VERCEL_PROJECT_ID }}",
          "orgId": "${{ secrets.VERCEL_ORG_ID }}",
          "settings": {
            "framework": "nextjs",
            "buildCommand": "npm run build",
            "outputDirectory": ".next",
            "installCommand": "npm install",
            "rootDirectory": null,
            "sourceFilesOutsideRootDirectory": false
          }
        }
        EOF

        echo "üìù Created project.json:"
        cat .vercel/project.json
        
        # Vercel APIÁµåÁî±„Åß„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆö„ÇíÁõ¥Êé•Êõ¥Êñ∞
        echo "üîÑ Updating project settings via API..."
        curl -X PATCH \
          "https://api.vercel.com/v9/projects/${{ secrets.VERCEL_PROJECT_ID }}?teamId=${{ secrets.VERCEL_ORG_ID }}" \
          -H "Authorization: Bearer $VERCEL_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "framework": "nextjs",
            "buildCommand": null,
            "outputDirectory": null,
            "installCommand": null,
            "rootDirectory": null
          }' || echo "Failed to update project settings"
        
        # Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„Çâ„Éá„Éó„É≠„Ç§ÂÆüË°å
        sleep 5
        
        # Êîπ„ÇÅ„Å¶„Éá„Éó„É≠„Ç§ÂÆüË°å
        echo "üöÄ Starting deployment..."
        if vercel --prod --yes --token $VERCEL_TOKEN --scope ${{ secrets.VERCEL_ORG_ID }} --debug 2>&1; then
          echo "‚úÖ CLI deployment succeeded"
        else
          echo "‚ùå CLI deployment failed, using GitHub integration..."
          
          # ÊñπÊ≥ï2: GitHub IntegrationÁµåÁî±„ÅÆ„Éá„Éó„É≠„Ç§
          echo "üîÑ Using GitHub integration deployment..."
          
          # Vercel API„ÅßGitHubÁµ±Âêà„Éá„Éó„É≠„Ç§
          DEPLOY_RESPONSE=$(curl -s -X POST \
            "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "rws-frontend",
              "project": "${{ secrets.VERCEL_PROJECT_ID }}",
              "target": "production",
              "gitSource": {
                "type": "github",
                "repo": "${{ github.repository }}",
                "ref": "${{ github.ref_name }}",
                "sha": "${{ github.sha }}"
              }
            }')
          
          echo "üì° Deployment response: $DEPLOY_RESPONSE"
          
          # „Éá„Éó„É≠„Ç§„É°„É≥„ÉàURL„Å®ID„ÇíÂèñÂæó
          DEPLOY_URL=$(echo $DEPLOY_RESPONSE | jq -r '.url // empty')
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.uid // empty')
          
          if [ -n "$DEPLOY_URL" ] && [ -n "$DEPLOY_ID" ]; then
            echo "‚úÖ GitHub integration deployment initiated: https://$DEPLOY_URL"
            echo "üìã Deployment ID: $DEPLOY_ID"
            
            # „Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÅÆÂÆå‰∫Ü„ÇíÂæÖÊ©ü
            echo "‚è≥ Waiting for deployment to complete..."
            for i in {1..30}; do
              sleep 10
              STATUS_RESPONSE=$(curl -s \
                "https://api.vercel.com/v13/deployments/$DEPLOY_ID" \
                -H "Authorization: Bearer $VERCEL_TOKEN")
              
              STATUS=$(echo $STATUS_RESPONSE | jq -r '.readyState // empty')
              echo "üîç Deployment status: $STATUS"
              
              if [ "$STATUS" = "READY" ]; then
                echo "‚úÖ Deployment completed successfully!"
                break
              elif [ "$STATUS" = "ERROR" ] || [ "$STATUS" = "CANCELED" ]; then
                echo "‚ùå Deployment failed with status: $STATUS"
                exit 1
              fi
              
              if [ $i -eq 30 ]; then
                echo "‚ö†Ô∏è Deployment timeout, but may still complete"
              fi
            done
          else
            echo "‚ùå GitHub integration deployment failed"
            echo "Response: $DEPLOY_RESPONSE"
            exit 1
          fi
        fi
      timeout-minutes: 15

  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Health Check
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
        echo "üîç Checking API health..."
        for i in {1..6}; do
          if curl -f -s --max-time 20 ${{ secrets.SUPABASE_URL }}/functions/v1/api/api/health; then
            echo "‚úÖ API healthy!"
            break
          fi
          echo "‚è≥ API not ready, retrying in 10s... (attempt $i/6)"
          sleep 10
          if [ $i -eq 6 ]; then
            echo "‚ùå API health check failed after 6 attempts."
            exit 1
          fi
        done
        
        echo "üîç Checking frontend..."
        for i in {1..6}; do
          if curl -f -s --max-time 20 ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}; then
            echo "‚úÖ Frontend healthy!"
            break
          fi
          echo "‚è≥ Frontend not ready, retrying in 10s... (attempt $i/6)"
          sleep 10
          if [ $i -eq 6 ]; then
            echo "‚ùå Frontend health check failed after 6 attempts."
            exit 1
          fi
        done
        
        echo "üéâ All health checks passed!"
      timeout-minutes: 10 