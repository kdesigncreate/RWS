name: RWS Application Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Frontend testing job
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/clover.xml
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            ./frontend/test-results/
            ./frontend/coverage/

  # Backend testing job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rws_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_pgsql, tokenizer, xml
          coverage: xdebug

      - name: Copy environment file
        run: cp .env.example .env.testing

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Generate application key
        run: php artisan key:generate --env=testing

      - name: Set up database
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: rws_test
          DB_USERNAME: postgres
          DB_PASSWORD: password
        run: |
          php artisan config:cache --env=testing
          php artisan migrate:fresh --seed --env=testing

      - name: Run PHPUnit tests with coverage
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: rws_test
          DB_USERNAME: postgres
          DB_PASSWORD: password
        run: ./vendor/bin/phpunit --coverage-clover=coverage-clover.xml

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage-clover.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            ./backend/test-results/
            ./backend/coverage-html/

  # End-to-End testing job
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rws_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_pgsql, tokenizer, xml

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Setup backend environment
        working-directory: ./backend
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: rws_test
          DB_USERNAME: postgres
          DB_PASSWORD: password
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan migrate:fresh --seed

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Start backend server
        working-directory: ./backend
        run: php artisan serve --port=8000 &

      - name: Start frontend server
        working-directory: ./frontend
        run: npm run dev &

      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          timeout 60 bash -c 'until curl -s http://localhost:8000 > /dev/null; do sleep 1; done'

      - name: Run Playwright tests
        working-directory: ./frontend
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            ./frontend/test-results/
            ./frontend/playwright-report/

  # Security testing job
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rws_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_pgsql, tokenizer, xml

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Setup backend environment
        working-directory: ./backend
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: rws_test
          DB_USERNAME: postgres
          DB_PASSWORD: password
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan migrate:fresh --seed

      - name: Start backend server
        working-directory: ./backend
        run: php artisan serve --port=8000 &

      - name: Start frontend server
        working-directory: ./frontend
        run: npm run dev &

      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          timeout 60 bash -c 'until curl -s http://localhost:8000 > /dev/null; do sleep 1; done'

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '../security-tests/zap-baseline.yml'
          cmd_options: '-a'

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            ./security-tests/zap-reports/

  # Code quality and analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Dependency security check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit (Frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Run Composer audit (Backend)
        working-directory: ./backend
        run: composer audit

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: rws_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, pdo_pgsql, tokenizer, xml

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: Setup backend environment
        working-directory: ./backend
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: rws_test
          DB_USERNAME: postgres
          DB_PASSWORD: password
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:cache
          php artisan migrate:fresh --seed

      - name: Start backend server
        working-directory: ./backend
        run: php artisan serve --port=8000 &

      - name: Start frontend server
        working-directory: ./frontend
        run: npm run build && npm run start &

      - name: Wait for servers to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          timeout 60 bash -c 'until curl -s http://localhost:8000 > /dev/null; do sleep 1; done'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './frontend/.lighthouserc.js'

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            ./.lighthouseci/

  # Build and deploy to staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Deploy to staging
        run: echo "Deploying to staging environment..."
        # Add your deployment steps here

  # Notification job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, code-quality, dependency-check]
    if: always()

    steps:
      - name: Notify Slack on success
        if: needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' && needs.e2e-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ All RWS tests passed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ RWS tests failed. Please check the workflow run for details.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}